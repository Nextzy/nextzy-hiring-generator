{"version":3,"sources":["template/background.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Text","Typography","TextArea","Input","COVER_WIDTH","COVER_HEIGHT","DEFAULT_HIRING_TYPE_TEXT_LINE_SPACING","DEFAULT_LABEL_TEXT_MARGIN_BOTTOM","DEFAULT_JOB_TITLE_TEXT_MARGIN_BOTTOM","DEFAULT_TEXT_MARGIN_LEFT","LABEL_FONT_SIZE","FONT_SIZE","HIRING_TYPE_FONT_SIZE","MAX_TEXT_COVER","DEFAULT_IMAGE_QUALITY","FIT_BOTH","FIT_WIDTH","FIT_HEIGHT","options","label","value","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","calculateImageSize","imageWidth","imageHeight","canvasWidth","canvasHeight","side","getMostSizeFit","width","height","imageRatio","canvasRatio","generateCover","asyncToGenerator","regenerator_default","a","mark","_callee","canvas","context","_this$state","text1","text2","imageQuality","backgroundImage","_this$calculateImageS","backgroundImageWidth","backgroundImageHeight","backgroundImagePositionX","backgroundImagePositionY","textLabelPositionX","text1PositionX","text2PositionX","textLabelPositionY","text1PositionY","text2PositionY","jobTitle","hiringType","wrap","_context","prev","next","createCanvas","getContext","state","loadImage","background","sent","drawImage","font","fillStyle","fillText","imageSmoothingEnabled","setState","coverDataUrl","toDataURL","stop","source","Promise","resolve","reject","image","Image","src","onload","onJobTitleTextChanged","e","words","target","slice","refresh","onHiringTypeCheckChanged","filter","item","includes","map","join","onImageQualityChanged","setTimeout","downloadCover","filename","toLowerCase","replace","document","createElement","href","download","click","backToMain","undefined","isImageSelected","react_default","dist","montserrat","className","card","alt","onClick","placeholder","autosize","minRows","maxRows","onChange","es_checkbox","Group","defaultValue","slider","min","max","step","dots","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6eea39ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.a64415bf.jpg\";","import React, { Component } from 'react'\nimport { FontObserver } from 'react-with-async-fonts';\nimport background from './template/background.jpg'\nimport './App.css'\nimport { Card, Typography, Slider, Button, Input, Checkbox } from 'antd'\nimport { createCanvas, loadImage } from 'canvas'\n\nconst { Text } = Typography\nconst { TextArea } = Input\n\n// Canvas constants\nconst COVER_WIDTH = 1200\nconst COVER_HEIGHT = 1200\n\n// Text constants\nconst DEFAULT_TEXT_MARGIN_TOP_DOUBLE_LINE = 55\nconst DEFAULT_TEXT_MARGIN_TOP_SINGLE_LINE = 70\nconst DEFAULT_HIRING_TYPE_TEXT_LINE_SPACING = 70\nconst DEFAULT_LABEL_TEXT_MARGIN_BOTTOM = 330\nconst DEFAULT_JOB_TITLE_TEXT_MARGIN_BOTTOM = 222\nconst DEFAULT_TEXT_MARGIN_BOTTOM = 285\nconst DEFAULT_TEXT_MARGIN_LEFT = 105\nconst LABEL_FONT_SIZE = '65px'\nconst FONT_SIZE = '80px'\nconst HIRING_TYPE_FONT_SIZE = '40px'\nconst MAX_TEXT_COVER = 50\n\n// Export constant\nconst DEFAULT_IMAGE_QUALITY = 100\n\n// Image resize calculation\nconst FIT_BOTH = 0\nconst FIT_WIDTH = 1\nconst FIT_HEIGHT = 2\n\nconst options = [\n  { label: 'Full-time', value: 'full_time' },\n  { label: 'Contract', value: 'contract' },\n  { label: 'Internship', value: 'internship' },\n];\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      coverDataUrl: undefined,\n      text1: 'Job title',\n      text2: undefined,\n      isImageSelected: false,\n      imageQuality: DEFAULT_IMAGE_QUALITY\n    }\n  }\n\n  componentDidMount() {\n    this.refresh()\n  }\n\n  calculateImageSize = (imageWidth, imageHeight, canvasWidth, canvasHeight) => {\n    let side = this.getMostSizeFit(imageWidth, imageHeight, canvasWidth, canvasHeight)\n    let width = 100\n    let height = 100\n    if(side === FIT_HEIGHT) {\n      width = canvasHeight * imageWidth / imageHeight\n      height = canvasHeight\n    } else if(side === FIT_WIDTH) {\n      width = canvasWidth\n      height = canvasWidth * imageHeight / imageWidth\n    } else {\n      width = canvasWidth\n      height = canvasHeight\n    }\n    return { width, height}\n  }\n\n  getMostSizeFit = (imageWidth, imageHeight, canvasWidth, canvasHeight) => {\n    let imageRatio = imageWidth / imageHeight\n    let canvasRatio = canvasWidth / canvasHeight\n    if (canvasRatio > imageRatio) {\n      return FIT_WIDTH\n    } else if(canvasRatio < imageRatio) { \n      return FIT_HEIGHT\n    } else {\n      return FIT_BOTH\n    }\n  }\n\n  generateCover = async () => {\n    const canvas = createCanvas(COVER_WIDTH, COVER_HEIGHT)\n    const context = canvas.getContext('2d')\n    const { text1, text2, imageQuality } = this.state\n\n    // Draw background\n    let backgroundImage = await loadImage(background)\n    let { width: backgroundImageWidth, height: backgroundImageHeight } = this.calculateImageSize(backgroundImage.width, backgroundImage.height, canvas.width, canvas.height)\n    let backgroundImagePositionX = (canvas.width - backgroundImageWidth) / 2\n    let backgroundImagePositionY = (canvas.height - backgroundImageHeight) / 2\n    context.drawImage(backgroundImage, backgroundImagePositionX, backgroundImagePositionY, backgroundImageWidth, backgroundImageHeight)\n\n    // Calculate the position and margin of text\n    let textLabelPositionX = DEFAULT_TEXT_MARGIN_LEFT\n    let text1PositionX = DEFAULT_TEXT_MARGIN_LEFT\n    let text2PositionX = text1PositionX\n    let textLabelPositionY = (canvas.height - DEFAULT_LABEL_TEXT_MARGIN_BOTTOM)\n    let text1PositionY = (canvas.height - DEFAULT_JOB_TITLE_TEXT_MARGIN_BOTTOM)\n    let text2PositionY = text1PositionY + DEFAULT_HIRING_TYPE_TEXT_LINE_SPACING\n\n    // Draw foreground 1st cover text\n    const label = 'Hiring'\n    context.font = LABEL_FONT_SIZE + ' \"Montserrat\"'\n    context.fillStyle = 'white'\n    context.fillText(label, textLabelPositionX, textLabelPositionY)\n\n    // Draw job title text\n    const jobTitle = text1 || ''\n    context.font = '600 ' + FONT_SIZE + ' \"Montserrat\"'\n    context.fillStyle = 'white'\n    context.fillText(jobTitle, text1PositionX, text1PositionY)\n\n    // Draw hiring type text\n    const hiringType = text2 || ''\n    context.font = HIRING_TYPE_FONT_SIZE + ' \"Montserrat\"'\n    context.fillStyle = 'white'\n    context.imageSmoothingEnabled = true\n    context.fillText(hiringType, text2PositionX, text2PositionY)\n\n    // Update to state\n    this.setState({\n      coverDataUrl: canvas.toDataURL('image/jpeg', imageQuality / 100)\n    })\n  }\n\n  loadImage = source => {\n    return new Promise((resolve, reject) => {\n      let image = new Image()\n      image.src = source\n      image.onload = () => {\n        resolve(image)\n      }\n    })\n  }\n\n  onJobTitleTextChanged = e => {\n    let words = e.target.value\n    e.target.value = words.slice(0, MAX_TEXT_COVER)\n    this.setState({\n      text1: words\n    })\n    this.refresh()\n  }\n\n  onHiringTypeCheckChanged = e => {\n    let words = options.filter((item) => {\n      return e.includes(item.value); \n    }).map((item) => {\n      return item.label\n    }).join(', ')\n    this.setState({\n      text2: words\n    })\n    this.refresh()\n  }\n\n  onImageQualityChanged = value => {\n    this.setState({\n      imageQuality: value\n    })\n    this.refresh()\n  }\n\n  refresh = () => {\n    setTimeout(() => {\n      this.generateCover()\n    }, 300)\n  }\n\n  downloadCover = () => {\n    let filename = (('_' + this.state.text1) || '').toLowerCase().replace(' ', '_').replace('/', '_').replace('-', '_')\n    let a = document.createElement('a')\n    a.href = this.state.coverDataUrl\n    a.download = 'hiring' + filename + '.jpg'\n    a.click()\n  }\n\n  backToMain = () => {\n    this.setState({\n      coverDataUrl: undefined,\n      text1: undefined,\n      text2: undefined,\n      isImageSelected: false, \n      imageQuality: DEFAULT_IMAGE_QUALITY\n    })\n  }\n\n  render() {\n    const { coverDataUrl } = this.state\n    return (\n      <FontObserver montserrat=\"Montserrat\">\n      <div className=\"App\">\n        <Card className=\"cover-generator\">\n          <div>\n            <img className=\"image-render\" src={coverDataUrl} alt=\"\" onClick={this.downloadCover} />\n          </div>\n          <div>\n            <Text className=\"download-description\">Click on the image to download</Text>\n          </div>\n          <div className=\"cover-text\">\n            <TextArea\n              className=\"job-title\"\n              placeholder=\"Job title\"\n              autosize={{ minRows: 1, maxRows: 1 }}\n              onChange={this.onJobTitleTextChanged}\n            />\n            <Checkbox.Group\n              className=\"hiring-type\"\n              options={options}\n              defaultValue={[]}\n              onChange={this.onHiringTypeCheckChanged}\n            />\n          </div>\n          <div className=\"image-quality\">\n            <Text className=\"image-quality-label\">Image Quality</Text>\n            <Slider\n              className=\"image-quality-slider\"\n              defaultValue={DEFAULT_IMAGE_QUALITY}\n              min={50}\n              max={100}\n              step={10}\n              dots={true}\n              onChange={this.onImageQualityChanged}\n            />\n          </div>\n        </Card>\n      </div>\n      </FontObserver>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}